/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*
 * (C) 2018 by Argonne National Laboratory.
 *     See COPYRIGHT in top-level directory.
 */

#ifndef OSHMPI_SHMEMX_H
#define OSHMPI_SHMEMX_H

#include <shmem.h>

#define SHMEMX_TEAM_NODE  ((shmem_team_t)0x70001)

typedef void *shmemx_space_t;
/*
 * ZE device handles are struct pointers, while CUDA handles are integers. If
 * we need to use CUDA handles at some point, we need to define this in a way
 * that maintains a stable ABI. Mostly likely with a union type.
 */
typedef void *shmemx_device_handle_t;

typedef enum {
    SHMEMX_MEM_HOST,
    SHMEMX_MEM_CUDA,            /* valid only when compile with --enable-cuda */
    SHMEMX_MEM_ZE               /* valid only when compile with --enable-ze */
} shmemx_memkind_t;

typedef enum {
    SHMEMX_SPACE_LAT_PREFERRED = 1,
    SHMEMX_SPACE_MR_PREFERRED = 2
} shmemx_space_hint_t;

typedef struct {
    size_t sheap_size;
    int num_contexts;
    shmemx_memkind_t memkind;
    shmemx_device_handle_t device_handle;
    long hints;                 /* combination of options defined in shmemx_space_hint_t with a bitwise OR */
} shmemx_space_config_t;

void shmemx_space_create(shmemx_space_config_t space_config, shmemx_space_t * space);
void shmemx_space_destroy(shmemx_space_t space);
int shmemx_space_create_ctx(shmemx_space_t space, long options, shmem_ctx_t * ctx);
void shmemx_space_attach(shmemx_space_t space);
void shmemx_space_detach(shmemx_space_t space);
void *shmemx_space_malloc(shmemx_space_t space, size_t size);
void *shmemx_space_calloc(shmemx_space_t space, size_t count, size_t size);
void *shmemx_space_align(shmemx_space_t space, size_t alignment, size_t size);

#endif /* OSHMPI_SHMEMX_H */
